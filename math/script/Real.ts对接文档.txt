Real.ts(TypeScript)对接文档
最后修改于 2020.9.4 23时 By LonelyDagger

一 前言
<节释义 本节介绍Real.ts的基本目标和基础工作。>
1.Real意为实数。Real.ts实现实数范围内的一些中低阶运算(包括四则(适用于所有实数)、二次方根(适用于整数)、多次幂(适用于所有实数)等)。
2.js基本库无法准确保存并运算分数、无理数和未知数，因此Real.ts通过TypeScript定义了多种类，以保存这些数据。
3.TypeScript无法被客户端原生支持。在完成对Real.ts的修改后，须通过TypeScript编译器将其编译为JavaScript代码。
4.TypeScript编译器可通过npm下载。npm随同Node.js安装。下载npm后可通过:
npm install -g cnpm --registry=https://registry.npm.taobao.org
命令安装cnpm(淘宝非营利性团队提供的npm国内镜像)，便于后续快速下载TypeScript:
cnpm install -g typescript
注意提及的所有命令都不能随便修改大小写。如需使用npm安装TypeScript，则须将cnpm命令换为npm命令:
npm install -g typescript
完成TypeScript安装后便可使用tsc命令编译ts文件。假设当前目录为整个储存库的顶级目录，则可使用:
tsc .\math\script\Real.ts
命令来编译Real.ts。若编译成功则不会显示信息，并会在ts文件同级目录下生成同名的js文件。
5.由于JavaScript并不原生支持TypeScript较多特性(如类型注释)，编译生成的js文件和原ts文件逻辑结构相差可能较大，并且在F12开发人员工具的控制台调试中可能取得意外的效果。
6.在2020.8.29，Real.ts进行第一次整体重构。重构提升了库的可拓展性，增加了irrationalItem、constItem、uncertainItem等类以符合高级需求。
7.重构前已保留一份旧版本的副本，命名为Real.old.ts。此副本可在重构后版本取得较大进展后删除。

二 编程规范
<节释义 本节介绍Real.ts中的编程规范。充分理解它们将有助于对接工作，而对Real.ts的一切修改也须遵循这些规范。>
1.布尔返回值方法使用肯定语态而非否定。例:使用hasRational()而非hasnotRational()。
2.方法命名使用动(宾)而非(主)谓。
3.方法、属性命名使用小驼峰命名法，类、接口命名使用大驼峰命名法。
4.在进行连续判断时，尤其是类型判断时，不推荐使用switch。
5.直接return表达式结果，而非if(表达式)return true。并且不推荐使用else if。
6.判断时将无法处理的分支一直留至方法底部并在底部统一返回特定的无效值，而非在发现无效时立即返回无效值。尽管这么做会降低性能，但有利于维护。
7.推荐使用let，但注意部分变量可能需要跨区域访问。
8.不推荐使用foreach。
9.声明任何变量或属性后都需要添加类型注释。即使是any也须添加。
10.在判断类型和联合类型声明中保持简略。如果classAA是classA的继承类，则应使用<classA|classB>而非<classA|classAA|classB>。
11.在较大的方法中须撰写注释。注释无须严谨的格式，易懂即可。
12.暂不创建自定义异常类，抛出异常统一使用throw new Error("{错误信息}")。
13.当判断变量非空时只要语法允许，就不添加!=undefined。
14.优先使用联合类型而非共同基类。
15.没有必要的大括号应删除。
16.为了保证逻辑严密，须保留长判断表达式中用于分组的小括号。
17.优先使用静态方法而非实例方法。例:优先使用RealComputable.addReal(a,b)而非a.add(b)。

三 结构释义
<节释义 本节介绍Real.ts中的所有类，包括其有效方法、属性和用法。所有类的属性不应在创建后被修改，因此须在合理的时机深表克隆对象。所有属性若未说明可为undefined，则始终不为undefined。>
1.abstract class RealComputable
    所有实数的基类，并实现实数计算的静态方法。定义抽象方法用于省去减法(等效于加上相反数)和除法(等效于乘以倒数)的实现。
    已知的实数继承类:Uncertain,Rational,Irrational,SpecialConst,SquareRoot,ConstItem,SpecialConstItem,IrrationalItem,UncertainItem,Monomial,Polynomial
    (1)static addReal(a: RealComputable, b: RealComputable): RealComputable
        实现实数加法。
    (2)static mulReal(a: RealComputable, b: RealComputable): RealComputable
        实现实数乘法。
    (3)static equals(a: RealComputable, b: RealComputable): boolean
        实现实数的值比较方法，可跨类型比较，但不能比较非实数。两个参数均为undefined始终返回true，有且只有一个参数为undefined始终返回false。
    (4)abstract opp(): RealComputable
        要求继承类实现的取相反数方法。
    (5)abstract rec(): RealComputable
        要求继承类实现的取倒数方法。
    (6)add(n: RealComputable): RealComputable
        实例方法，调用静态实数加法。
    (7)min(n: RealComputable): RealComputable
        实例方法，调用静态实数加法与取相反数方法。
    (8)mul(n: RealComputable): RealComputable
        实例方法，调用静态实数乘法。
    (9)div(n: RealComputable): RealComputable
        实例方法，调用静态实数乘法与取倒数方法。
    (10)equals(n: RealComputable): boolean
        实例方法，调用静态值比较方法。
2.class Uncertain extends RealComputable
    表示单个未知数，并保存其指数。
    (1)public readonly symbol: string
        只读属性，表示未知数符号。只能使用单个a~z的字符。
    (2)public readonly exponent: number
        只读属性，表示未知数指数。必须为非零整数。
    (3)constructor(s: string, e: number = 1, v: boolean = false)
        构造函数，创建单个未知数，将检查参数s和e。若v为true则跳过检查。
    (4)opp(): Monomial
        实现抽象方法获取相反数。返回带有常数-1和自身作为未知数项的单项式。
    (5)rec(): Uncertain
        实现抽象方法获取倒数。返回自身的深表复制，指数互为相反数。
3.class Rational extends RealComputable
    表示有理数。
    (1)public static readonly One: Rational
        只读静态成员，表示整数1。
    (2)public static readonly Zero: Rational
        只读静态成员，表示整数0。
    (3)public static readonly MinusOne: Rational
        只读静态成员，表示整数-1。
    (4)public readonly self: number
        只读属性，表示实例的分子。实例的正负性体现在分子上。
    (5)public readonly divisor: number
        只读属性，表示实例的分母。
    (6)constructor(s: number, d: number, v?: boolean)
        构造函数，创建有理数，将检查参数s和d并化简。若v为true则跳过检查。
    (7)opp(): Rational
        实现抽象方法获取相反数。返回自身的深表复制，分子互为相反数。
    (8)rec(): Rational
        实现抽象方法获取倒数。
4.abstract class Irrational extends RealComputable
    所有无理数的基类。
    (1)public static irrationalEquals(a: Irrational, b: Irrational): boolean
        静态无理数值比较方法，可跨类型比较，但不能比较非无理数。两个参数均为undefined始终返回true，有且只有一个参数为undefined始终返回false。
    (2)opp(): ConstItem
        实现抽象方法获取相反数。返回返回带有有理数-1和自身作为无理数项的常数项。
    (3)abstract rec(): Rational | Irrational | ConstItem
        限定继承类实现获取倒数抽象方法时返回值的类型。
5.class SpecialConst extends Irrational
    表示特殊无理数常量，并保存其指数。
    (1)public readonly type: ConstType
        只读属性，表示常量类型。值应为ConstType枚举的子项之一。
    (2)public readonly exponent: number
        只读属性，表示常量指数。必须为非零整数。
    (3)constructor(t: ConstType, e: number = 1, v: boolean = false)
        构造函数，创建特殊无理数常量，将检查参数e。若v为true则跳过检查。
    (4)rec(): SpecialConst
        实现抽象方法获取倒数。返回自身的深表复制，指数互为相反数。
6.class SquareRoot extends Irrational
    表示平方根，或称数学上的算术平方根(即不带正负号)。由于通过整数创建平方根可化简，此类的构造函数为私有。
    (1)public readonly self: number
        只读属性，表示根底数。
    (2)public static unsafeCreate(s: number): SquareRoot
        静态方法，非安全构造平方根。将直接调用构造函数，不会检查参数s，也不对其化简。
    (3)public static create(s: number): SquareRoot | Rational | ConstItem
        静态方法，构造平方根，将检查参数s并化简。
        化简过程:
        定义整数r表示将创建的有理数部分。
        检查s能否被平方数(保存在SquareNumber数组中，已预存2~50的平方值)整除，若能则将s除以该平方数，然后将r乘以该平方数的算术平方根。
        当s小于下一个平方数或已超出平方数最大值时，通过s和r创建有理数、无理数或常数项。
    (4)rec(): ConstItem
        实现抽象方法获取倒数。将此平方根有理化。
7.class ConstItem extends RealComputable
    表示常数项，包括有理数和无理数项。
    (1)public hasRational(): boolean
        实例方法，检查此常数项的有理数部分是否不等于1。
    (2)public hasIrrational(): boolean
        实例方法，检查此常数项是否有无理数项。
    (3)opp(): ConstItem
        实现抽象方法获取相反数。返回自身的深表复制，有理数部分互为相反数。
    (4)rec(): Rational | Irrational | ConstItem
        实现抽象方法获取倒数。将有理数部分的倒数和无理数项的倒数(若有无理数项)相乘。
    (5)public readonly rational: Rational
        只读属性，表示有理数部分。
    (6)public readonly irrational: IrrationalItem
        只读属性，表示无理数项。可能为undefined。
    (7)constructor(r: Rational = Rational.One, i?: IrrationalItem)
        构造函数，创建常数项。
8.class SpecialConstItem extends Irrational
    表示特殊无理数常量项。通过数组来储存特殊无理数常量。
9.class IrrationalItem extends Irrational
    表示无理数项，包括特殊无理数常量项和平方根。
10.class UncertainItem extends RealComputable
    表示未知数项，通过数组来储存未知数。
11.class Monomial extends RealComputable
    表示单项式，包括常数项和未知数项。
12.class Polynomial extends RealComputable
    表示多项式，通过数组来储存单项式。暂不支持对多项式取倒数。